// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Psi_LSMLE_Cpp
arma::mat Psi_LSMLE_Cpp(arma::vec Theta, NumericVector y, arma::mat X, arma::mat Z, double alpha, StringVector link_mu, StringVector link_phi);
RcppExport SEXP _RobustBetaReg_Psi_LSMLE_Cpp(SEXP ThetaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP link_muSEXP, SEXP link_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_mu(link_muSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_phi(link_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi_LSMLE_Cpp(Theta, y, X, Z, alpha, link_mu, link_phi));
    return rcpp_result_gen;
END_RCPP
}
// L_alpha
double L_alpha(arma::vec Theta, NumericVector y, arma::mat X, arma::mat Z, double alpha, StringVector link_mu, StringVector link_phi);
RcppExport SEXP _RobustBetaReg_L_alpha(SEXP ThetaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP link_muSEXP, SEXP link_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_mu(link_muSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_phi(link_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(L_alpha(Theta, y, X, Z, alpha, link_mu, link_phi));
    return rcpp_result_gen;
END_RCPP
}
// Psi_LSMLE_Jacobian_C
arma::mat Psi_LSMLE_Jacobian_C(arma::vec Theta, NumericVector y, arma::mat X, arma::mat Z, double alpha, StringVector link_mu, StringVector link_phi);
RcppExport SEXP _RobustBetaReg_Psi_LSMLE_Jacobian_C(SEXP ThetaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP link_muSEXP, SEXP link_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_mu(link_muSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_phi(link_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi_LSMLE_Jacobian_C(Theta, y, X, Z, alpha, link_mu, link_phi));
    return rcpp_result_gen;
END_RCPP
}
// p_LSMLE_Cpp
double p_LSMLE_Cpp(double y_star, double mu, double phi, double mu_0, double phi_0, double alpha, double Kx, double Kz);
RcppExport SEXP _RobustBetaReg_p_LSMLE_Cpp(SEXP y_starSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP mu_0SEXP, SEXP phi_0SEXP, SEXP alphaSEXP, SEXP KxSEXP, SEXP KzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type phi_0(phi_0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< double >::type Kz(KzSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LSMLE_Cpp(y_star, mu, phi, mu_0, phi_0, alpha, Kx, Kz));
    return rcpp_result_gen;
END_RCPP
}
// dp_LSMLE_Cpp
NumericVector dp_LSMLE_Cpp(NumericVector y_star, double mu, double phi, double mu_0, double phi_0, double alpha, double Kx, double Kz);
RcppExport SEXP _RobustBetaReg_dp_LSMLE_Cpp(SEXP y_starSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP mu_0SEXP, SEXP phi_0SEXP, SEXP alphaSEXP, SEXP KxSEXP, SEXP KzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_star(y_starSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type phi_0(phi_0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< double >::type Kz(KzSEXP);
    rcpp_result_gen = Rcpp::wrap(dp_LSMLE_Cpp(y_star, mu, phi, mu_0, phi_0, alpha, Kx, Kz));
    return rcpp_result_gen;
END_RCPP
}
// La_Cpp
NumericVector La_Cpp(NumericVector mu, NumericVector phi, NumericVector mu_0, NumericVector phi_0, double alpha, NumericVector Kx, NumericVector Kz, int thrd);
RcppExport SEXP _RobustBetaReg_La_Cpp(SEXP muSEXP, SEXP phiSEXP, SEXP mu_0SEXP, SEXP phi_0SEXP, SEXP alphaSEXP, SEXP KxSEXP, SEXP KzSEXP, SEXP thrdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi_0(phi_0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Kz(KzSEXP);
    Rcpp::traits::input_parameter< int >::type thrd(thrdSEXP);
    rcpp_result_gen = Rcpp::wrap(La_Cpp(mu, phi, mu_0, phi_0, alpha, Kx, Kz, thrd));
    return rcpp_result_gen;
END_RCPP
}
// La_CppB
NumericVector La_CppB(NumericVector p0, NumericVector y0, NumericVector mu, NumericVector phi, NumericVector mu_0, NumericVector phi_0, double alpha, NumericVector Kx, NumericVector Kz, int thrd);
RcppExport SEXP _RobustBetaReg_La_CppB(SEXP p0SEXP, SEXP y0SEXP, SEXP muSEXP, SEXP phiSEXP, SEXP mu_0SEXP, SEXP phi_0SEXP, SEXP alphaSEXP, SEXP KxSEXP, SEXP KzSEXP, SEXP thrdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi_0(phi_0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Kz(KzSEXP);
    Rcpp::traits::input_parameter< int >::type thrd(thrdSEXP);
    rcpp_result_gen = Rcpp::wrap(La_CppB(p0, y0, mu, phi, mu_0, phi_0, alpha, Kx, Kz, thrd));
    return rcpp_result_gen;
END_RCPP
}
// Psi_LMDPDE_Cpp
arma::mat Psi_LMDPDE_Cpp(arma::vec Theta, NumericVector y, arma::mat X, arma::mat Z, double alpha, StringVector link_mu, StringVector link_phi);
RcppExport SEXP _RobustBetaReg_Psi_LMDPDE_Cpp(SEXP ThetaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP link_muSEXP, SEXP link_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_mu(link_muSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_phi(link_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi_LMDPDE_Cpp(Theta, y, X, Z, alpha, link_mu, link_phi));
    return rcpp_result_gen;
END_RCPP
}
// D_alpha
double D_alpha(arma::vec Theta, NumericVector y, arma::mat X, arma::mat Z, double alpha, StringVector link_mu, StringVector link_phi);
RcppExport SEXP _RobustBetaReg_D_alpha(SEXP ThetaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP link_muSEXP, SEXP link_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_mu(link_muSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_phi(link_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(D_alpha(Theta, y, X, Z, alpha, link_mu, link_phi));
    return rcpp_result_gen;
END_RCPP
}
// Psi_LMDPDE_Jacobian_C
arma::mat Psi_LMDPDE_Jacobian_C(arma::vec Theta, NumericVector y, arma::mat X, arma::mat Z, double alpha, StringVector link_mu, StringVector link_phi);
RcppExport SEXP _RobustBetaReg_Psi_LMDPDE_Jacobian_C(SEXP ThetaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP link_muSEXP, SEXP link_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_mu(link_muSEXP);
    Rcpp::traits::input_parameter< StringVector >::type link_phi(link_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi_LMDPDE_Jacobian_C(Theta, y, X, Z, alpha, link_mu, link_phi));
    return rcpp_result_gen;
END_RCPP
}
// SQV_Cpp
NumericVector SQV_Cpp(arma::mat zq, double n, double p);
RcppExport SEXP _RobustBetaReg_SQV_Cpp(SEXP zqSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type zq(zqSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(SQV_Cpp(zq, n, p));
    return rcpp_result_gen;
END_RCPP
}
// OpenMPTest
int OpenMPTest(int numThrd);
RcppExport SEXP _RobustBetaReg_OpenMPTest(SEXP numThrdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numThrd(numThrdSEXP);
    rcpp_result_gen = Rcpp::wrap(OpenMPTest(numThrd));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP C_cauchit_d2eta_dmu2(SEXP, SEXP);
RcppExport SEXP C_cauchit_deta_dmu(SEXP, SEXP);
RcppExport SEXP C_cauchit_link(SEXP, SEXP);
RcppExport SEXP C_cauchit_linkinv(SEXP, SEXP);
RcppExport SEXP C_cloglog_d2eta_dmu2(SEXP, SEXP);
RcppExport SEXP C_cloglog_deta_dmu(SEXP, SEXP);
RcppExport SEXP C_cloglog_link(SEXP, SEXP);
RcppExport SEXP C_cloglog_linkinv(SEXP, SEXP);
RcppExport SEXP C_log_d2eta_dphi2(SEXP, SEXP);
RcppExport SEXP C_log_deta_dphi(SEXP, SEXP);
RcppExport SEXP C_logit_d2eta_dmu2(SEXP, SEXP);
RcppExport SEXP C_logit_deta_dmu(SEXP, SEXP);
RcppExport SEXP C_logit_link(SEXP, SEXP);
RcppExport SEXP C_logit_linkinv(SEXP, SEXP);
RcppExport SEXP C_log_link(SEXP, SEXP);
RcppExport SEXP C_log_linkinv(SEXP, SEXP);
RcppExport SEXP C_loglog_d2eta_dmu2(SEXP, SEXP);
RcppExport SEXP C_loglog_deta_dmu(SEXP, SEXP);
RcppExport SEXP C_loglog_link(SEXP, SEXP);
RcppExport SEXP C_loglog_linkinv(SEXP, SEXP);
RcppExport SEXP C_sqrt_d2eta_dphi2(SEXP, SEXP);
RcppExport SEXP C_sqrt_deta_dphi(SEXP, SEXP);
RcppExport SEXP C_sqrt_link(SEXP, SEXP);
RcppExport SEXP C_sqrt_linkinv(SEXP, SEXP);
RcppExport SEXP testeC(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_RobustBetaReg_Psi_LSMLE_Cpp", (DL_FUNC) &_RobustBetaReg_Psi_LSMLE_Cpp, 7},
    {"_RobustBetaReg_L_alpha", (DL_FUNC) &_RobustBetaReg_L_alpha, 7},
    {"_RobustBetaReg_Psi_LSMLE_Jacobian_C", (DL_FUNC) &_RobustBetaReg_Psi_LSMLE_Jacobian_C, 7},
    {"_RobustBetaReg_p_LSMLE_Cpp", (DL_FUNC) &_RobustBetaReg_p_LSMLE_Cpp, 8},
    {"_RobustBetaReg_dp_LSMLE_Cpp", (DL_FUNC) &_RobustBetaReg_dp_LSMLE_Cpp, 8},
    {"_RobustBetaReg_La_Cpp", (DL_FUNC) &_RobustBetaReg_La_Cpp, 8},
    {"_RobustBetaReg_La_CppB", (DL_FUNC) &_RobustBetaReg_La_CppB, 10},
    {"_RobustBetaReg_Psi_LMDPDE_Cpp", (DL_FUNC) &_RobustBetaReg_Psi_LMDPDE_Cpp, 7},
    {"_RobustBetaReg_D_alpha", (DL_FUNC) &_RobustBetaReg_D_alpha, 7},
    {"_RobustBetaReg_Psi_LMDPDE_Jacobian_C", (DL_FUNC) &_RobustBetaReg_Psi_LMDPDE_Jacobian_C, 7},
    {"_RobustBetaReg_SQV_Cpp", (DL_FUNC) &_RobustBetaReg_SQV_Cpp, 3},
    {"_RobustBetaReg_OpenMPTest", (DL_FUNC) &_RobustBetaReg_OpenMPTest, 1},
    {"C_cauchit_d2eta_dmu2", (DL_FUNC) &C_cauchit_d2eta_dmu2, 2},
    {"C_cauchit_deta_dmu",   (DL_FUNC) &C_cauchit_deta_dmu,   2},
    {"C_cauchit_link",       (DL_FUNC) &C_cauchit_link,       2},
    {"C_cauchit_linkinv",    (DL_FUNC) &C_cauchit_linkinv,    2},
    {"C_cloglog_d2eta_dmu2", (DL_FUNC) &C_cloglog_d2eta_dmu2, 2},
    {"C_cloglog_deta_dmu",   (DL_FUNC) &C_cloglog_deta_dmu,   2},
    {"C_cloglog_link",       (DL_FUNC) &C_cloglog_link,       2},
    {"C_cloglog_linkinv",    (DL_FUNC) &C_cloglog_linkinv,    2},
    {"C_log_d2eta_dphi2",    (DL_FUNC) &C_log_d2eta_dphi2,    2},
    {"C_log_deta_dphi",      (DL_FUNC) &C_log_deta_dphi,      2},
    {"C_logit_d2eta_dmu2",   (DL_FUNC) &C_logit_d2eta_dmu2,   2},
    {"C_logit_deta_dmu",     (DL_FUNC) &C_logit_deta_dmu,     2},
    {"C_logit_link",         (DL_FUNC) &C_logit_link,         2},
    {"C_logit_linkinv",      (DL_FUNC) &C_logit_linkinv,      2},
    {"C_log_link",           (DL_FUNC) &C_log_link,           2},
    {"C_log_linkinv",        (DL_FUNC) &C_log_linkinv,        2},
    {"C_loglog_d2eta_dmu2",  (DL_FUNC) &C_loglog_d2eta_dmu2,  2},
    {"C_loglog_deta_dmu",    (DL_FUNC) &C_loglog_deta_dmu,    2},
    {"C_loglog_link",        (DL_FUNC) &C_loglog_link,        2},
    {"C_loglog_linkinv",     (DL_FUNC) &C_loglog_linkinv,     2},
    {"C_sqrt_d2eta_dphi2",   (DL_FUNC) &C_sqrt_d2eta_dphi2,   2},
    {"C_sqrt_deta_dphi",     (DL_FUNC) &C_sqrt_deta_dphi,     2},
    {"C_sqrt_link",          (DL_FUNC) &C_sqrt_link,          2},
    {"C_sqrt_linkinv",       (DL_FUNC) &C_sqrt_linkinv,       2},
    {"testeC",               (DL_FUNC) &testeC,               2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RobustBetaReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
